{"remainingRequest":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\src\\views\\pages\\ecommerce\\product-detail.vue?vue&type=template&id=c6828aba&","dependencies":[{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\src\\views\\pages\\ecommerce\\product-detail.vue","mtime":1590779254000},{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676246665630},{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676246665630},{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":1676246672412},{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1676246679269},{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676246665630},{"path":"D:\\TRABAJO\\Proyectos\\Fullstackgroup\\Vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":1676246675465}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxMYXlvdXQ+CiAgPFBhZ2VIZWFkZXIgOnRpdGxlPSJ0aXRsZSIgOml0ZW1zPSJpdGVtcyIgLz4KICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC01Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kdWN0LWRldGFpbCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdiBmbGV4LWNvbHVtbiBuYXYtcGlsbHMiCiAgICAgICAgICAgICAgICAgICAgICBpZD0idi1waWxscy10YWIiCiAgICAgICAgICAgICAgICAgICAgICByb2xlPSJ0YWJsaXN0IgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1vcmllbnRhdGlvbj0idmVydGljYWwiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgICAgICAgICAgICBpZD0icHJvZHVjdC0xLXRhYiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InBpbGwiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iaW1hZ2VTaG93KCRldmVudCkiCiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9InRhYiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL3Byb2R1Y3QvaW1nLTEucG5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgbXgtYXV0byBkLWJsb2NrIHRhYi1pbWcgcm91bmRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJuYXYtbGluayIKICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3QtMi10YWIiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJwaWxsIgogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImltYWdlU2hvdygkZXZlbnQpIgogICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJ0YWIiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9wcm9kdWN0L2ltZy01LnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIG14LWF1dG8gZC1ibG9jayB0YWItaW1nIHJvdW5kZWQiCiAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibmF2LWxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0LTMtdGFiIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0icGlsbCIKICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJpbWFnZVNob3coJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT0idGFiIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvcHJvZHVjdC9pbWctMy5wbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCBteC1hdXRvIGQtYmxvY2sgdGFiLWltZyByb3VuZGVkIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im5hdi1saW5rIgogICAgICAgICAgICAgICAgICAgICAgICBpZD0icHJvZHVjdC00LXRhYiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9InBpbGwiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iaW1hZ2VTaG93KCRldmVudCkiCiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9InRhYiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL3Byb2R1Y3QvaW1nLTQucG5nIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQgbXgtYXV0byBkLWJsb2NrIHRhYi1pbWcgcm91bmRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IGNvbC05Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItY29udGVudCIgaWQ9InYtcGlsbHMtdGFiQ29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlIHNob3cgYWN0aXZlIiBpZD0icHJvZHVjdC0xIiByb2xlPSJ0YWJwYW5lbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2R1Y3QtaW1nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iZXhwYW5kZWRJbWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9wcm9kdWN0L2ltZy0xLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy1mbHVpZCBteC1hdXRvIGQtYmxvY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGV4dC1jZW50ZXIgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2sgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IG10LTIgbXItMSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWNhcnQgbXItMiI+PC9pPiBBZGQgdG8gY2FydAogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWxpZ2h0IGJ0bi1ibG9jayB3YXZlcy1lZmZlY3QgbXQtMiB3YXZlcy1saWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXNob3BwaW5nIG1yLTIiPjwvaT5CdXkgbm93CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSBlbmQgcHJvZHVjdCBpbWcgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtNyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCBtdC14bC0zIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ0ZXh0LXByaW1hcnkiPlQtc2hpcnQ8L2E+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im10LTEgbWItMyI+RnVsbCBzbGVldmUgQmx1ZSBjb2xvciB0LXNoaXJ0PC9oNT4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWlubGluZS1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1tdXRlZCBtci0zIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtbXV0ZWQiPiggMTMyICk8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibXQtMiI+CiAgICAgICAgICAgICAgICAgIDxkZWwgY2xhc3M9InRleHQtbXV0ZWQgbXItMiI+JDI1MjwvZGVsPiQyNDAKICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtZGFuZ2VyIGZvbnQtc2l6ZS0xMiBtbC0yIj4yNSAlIE9mZjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMyIKICAgICAgICAgICAgICAgID5UbyBhY2hpZXZlIHRoaXMsIGl0IHdvdWxkIGJlIG5lY2Vzc2FyeSB0byBoYXZlIHVuaWZvcm0gcHJvbnVuY2lhdGlvbjwvcD4KICAgICAgICAgICAgICAgIDxociBjbGFzcz0ibXktNCIgLz4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktbG9jYXRpb24iPjwvaT4gRGVsaXZlcnkgbG9jYXRpb24KICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWlubGluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgRGVsaXZlcnkgcGluY29kZSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1hcHBlbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1saWdodCIgdHlwZT0iYnV0dG9uIj5DaGVjazwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE0Ij5TcGVjaWZpY2F0aW9uIDo8L2g1PgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHByb2R1Y3QtZGVzYy1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWNpcmNsZS1tZWRpdW0gbXItMSBhbGlnbi1taWRkbGUiPjwvaT4gRnVsbCBTbGVldmUKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWNpcmNsZS1tZWRpdW0gbXItMSBhbGlnbi1taWRkbGUiPjwvaT4gQ290dG9uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1jaXJjbGUtbWVkaXVtIG1yLTEgYWxpZ24tbWlkZGxlIj48L2k+IEFsbCBTaXplcyBhdmFpbGFibGUKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWNpcmNsZS1tZWRpdW0gbXItMSBhbGlnbi1taWRkbGUiPjwvaT4gNCBEaWZmZXJlbnQgQ29sb3IKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNCI+U2VydmljZXMgOjwvaDU+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHByb2R1Y3QtZGVzYy1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktc3luYyB0ZXh0LXByaW1hcnkgbXItMSBhbGlnbi1taWRkbGUgZm9udC1zaXplLTE2Ij48L2k+IDEwIERheXMgUmVwbGFjZW1lbnQKICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kaSBtZGktY3VycmVuY3ktdXNkLWNpcmNsZSB0ZXh0LXByaW1hcnkgbXItMSBhbGlnbi1taWRkbGUgZm9udC1zaXplLTE2IgogICAgICAgICAgICAgICAgICAgICAgICA+PC9pPiBDYXNoIG9uIERlbGl2ZXJ5IGF2YWlsYWJsZQogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kdWN0LWNvbG9yIG10LTMiPgogICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXNpemUtMTQiPkNvbG9yIDo8L2g1PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2R1Y3QtY29sb3ItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9IkAvYXNzZXRzL2ltYWdlcy9wcm9kdWN0L2ltZy0xLnBuZyIgYWx0IGNsYXNzPSJhdmF0YXItbWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8cD5CbHVlPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2R1Y3QtY29sb3ItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9IkAvYXNzZXRzL2ltYWdlcy9wcm9kdWN0L2ltZy01LnBuZyIgYWx0IGNsYXNzPSJhdmF0YXItbWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8cD5DeWFuPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2R1Y3QtY29sb3ItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9IkAvYXNzZXRzL2ltYWdlcy9wcm9kdWN0L2ltZy0zLnBuZyIgYWx0IGNsYXNzPSJhdmF0YXItbWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8cD5HcmVlbjwvcD4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZHVjdC1jb2xvciBtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE0Ij5TaXplIDo8L2g1PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2R1Y3QtY29sb3ItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmF0YXItdGl0bGUgYmctdHJhbnNwYXJlbnQgdGV4dC1ib2R5Ij5TPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9kdWN0LWNvbG9yLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF2YXRhci14cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYXZhdGFyLXRpdGxlIGJnLXRyYW5zcGFyZW50IHRleHQtYm9keSI+TTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZHVjdC1jb2xvci1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdmF0YXIteHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImF2YXRhci10aXRsZSBiZy10cmFuc3BhcmVudCB0ZXh0LWJvZHkiPkw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2R1Y3QtY29sb3ItaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmF0YXItdGl0bGUgYmctdHJhbnNwYXJlbnQgdGV4dC1ib2R5Ij5YTDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tIGVuZCByb3cgLS0+CgogICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCI+CiAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE0IG1iLTMiPlByb2R1Y3QgZGVzY3JpcHRpb246PC9oNT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZHVjdC1kZXNjIj4KICAgICAgICAgICAgICA8Yi10YWJzIGNsYXNzPSJuYXYtdGFicy1jdXN0b20iIGNvbnRlbnQtY2xhc3M9ImJvcmRlciBib3JkZXItdG9wLTAgcC00Ij4KICAgICAgICAgICAgICAgIDxiLXRhYiB0aXRsZT0iRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPklmIHNldmVyYWwgbGFuZ3VhZ2VzIGNvYWxlc2NlLCB0aGUgZ3JhbW1hciBvZiB0aGUgcmVzdWx0aW5nIGxhbmd1YWdlIGlzIG1vcmUgc2ltcGxlIGFuZCByZWd1bGFyIHRoYW4gdGhhdCBvZiB0aGUgaW5kaXZpZHVhbDwvcD4KICAgICAgICAgICAgICAgICAgICA8cD5UbyBhY2hpZXZlIHRoaXMsIGl0IHdvdWxkIGJlIG5lY2Vzc2FyeSB0byBoYXZlIHVuaWZvcm0gZ3JhbW1hciwgcHJvbnVuY2lhdGlvbiBhbmQgbW9yZSBjb21tb24gc2V2ZXJhbCBsYW5ndWFnZXMgY29hbGVzY2UsIHRoZSBncmFtbWFyIG9mIHRoZSByZXN1bHRpbmcuPC9wPgogICAgICAgICAgICAgICAgICAgIDxwPkl0IHdpbGwgYmUgYXMgc2ltcGxlIGFzIG9jY2lkZW50YWwgaW4gZmFjdC48L3A+CgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLWNpcmNsZS1tZWRpdW0gbXItMSBhbGlnbi1taWRkbGUiPjwvaT4gSWYgc2V2ZXJhbCBsYW5ndWFnZXMgY29hbGVzY2UKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktY2lyY2xlLW1lZGl1bSBtci0xIGFsaWduLW1pZGRsZSI+PC9pPiBUbyBhbiBFbmdsaXNoIHBlcnNvbiwgaXQgd2lsbCBzZWVtIGxpa2Ugc2ltcGxpZmllZAogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1jaXJjbGUtbWVkaXVtIG1yLTEgYWxpZ24tbWlkZGxlIj48L2k+IFRoZXNlIGNhc2VzIGFyZSBwZXJmZWN0bHkgc2ltcGxlLgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvYi10YWI+CiAgICAgICAgICAgICAgICA8Yi10YWIgdGl0bGU9IlNwZWNpZmljYXRpb25zIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ub3dyYXAgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9InJvdyIgc3R5bGU9IndpZHRoOiA0MDBweDsiPkNhdGVnb3J5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+VC1TaGlydDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9InJvdyI+QnJhbmQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5KYWNrICYgSm9uZXM8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSJyb3ciPkNvbG9yPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Qmx1ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9InJvdyI+TWF0ZXJpYWw8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db3R0b248L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSJyb3ciPldlaWdodDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjE0MCBHPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2ItdGFiPgogICAgICAgICAgICAgIDwvYi10YWJzPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTQiPgogICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNCI+UmV2aWV3cyA6PC9oNT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1pbmxpbmUtZmxleCBtYi0zIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LW11dGVkIG1yLTMiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZGkgbWRpLXN0YXIgdGV4dC13YXJuaW5nIj48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWRpIG1kaS1zdGFyIHRleHQtd2FybmluZyI+PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1kaSBtZGktc3RhciB0ZXh0LXdhcm5pbmciPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZGkgbWRpLXN0YXIiPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LW11dGVkIj4oIDEzMiBjdXN0b21lciBSZXZpZXcpPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3JkZXIgcC00IHJvdW5kZWQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGJvcmRlci1ib3R0b20gcGItMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1tdXRlZCBtYi0yIgogICAgICAgICAgICAgICAgICA+VG8gYW4gRW5nbGlzaCBwZXJzb24sIGl0IHdpbGwgc2VlbSBsaWtlIHNpbXBsaWZpZWQgRW5nbGlzaCwgYXMgYSBza2VwdGljYWwgQ2FtYnJpZGdlPC9wPgogICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNSBtYi0zIj5KYW1lczwvaDU+CgogICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtaW5saW5lIHByb2R1Y3QtcmV2aWV3LWxpbmsgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS10aHVtYi11cCBhbGlnbi1taWRkbGUgbXItMSI+PC9pPiBMaWtlCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLW1lc3NhZ2UtdGV4dCBhbGlnbi1taWRkbGUgbXItMSI+PC9pPiBDb21tZW50CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9ImZsb2F0LXNtLXJpZ2h0IGZvbnQtc2l6ZS0xMiI+MTEgRmViLCAyMDIwPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGJvcmRlci1ib3R0b20gcHktMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1tdXRlZCBtYi0yIgogICAgICAgICAgICAgICAgICA+RXZlcnlvbmUgcmVhbGl6ZXMgd2h5IGEgbmV3IGNvbW1vbiBsYW5ndWFnZSB3b3VsZCBiZSBkZXNpcmFibGU8L3A+CiAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE1IG1iLTMiPkRhdmlkPC9oNT4KCiAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgcHJvZHVjdC1yZXZpZXctbGluayBtYi0wIj4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXRodW1iLXVwIGFsaWduLW1pZGRsZSBtci0xIj48L2k+IExpa2UKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktbWVzc2FnZS10ZXh0IGFsaWduLW1pZGRsZSBtci0xIj48L2k+IENvbW1lbnQKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZmxvYXQtc20tcmlnaHQgZm9udC1zaXplLTEyIj4yMiBKYW4sIDIwMjA8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgcHktMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1tdXRlZCBtYi0yIgogICAgICAgICAgICAgICAgICA+SWYgc2V2ZXJhbCBsYW5ndWFnZXMgY29hbGVzY2UsIHRoZSBncmFtbWFyIG9mIHRoZSByZXN1bHRpbmc8L3A+CiAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC1zaXplLTE1IG1iLTMiPlNjb3R0PC9oNT4KCiAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgcHJvZHVjdC1yZXZpZXctbGluayBtYi0wIj4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZGkgbWRpLXRodW1iLXVwIGFsaWduLW1pZGRsZSBtci0xIj48L2k+IExpa2UKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktbWVzc2FnZS10ZXh0IGFsaWduLW1pZGRsZSBtci0xIj48L2k+IENvbW1lbnQKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZmxvYXQtc20tcmlnaHQgZm9udC1zaXplLTEyIj4wNCBKYW4sIDIwMjA8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8IS0tIGVuZCBjYXJkIC0tPgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBlbmQgcm93IC0tPgoKICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdmF0YXItc20gbXItMyI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmF0YXItdGl0bGUgYmctbGlnaHQgcm91bmRlZC1jaXJjbGUgdGV4dC1wcmltYXJ5IGZvbnQtc2l6ZS0yNCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpLWNoZWNrYm94LWNpcmNsZS1saW5lIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSBhbGlnbi1zZWxmLWNlbnRlciBvdmVyZmxvdy1oaWRkZW4iPgogICAgICAgICAgICAgICAgICA8aDU+RnJlZSBTaGlwcGluZzwvaDU+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPlNlZCB1dCBwZXJzcGljaWF0aXMgdW5kZTwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIG10LTQgbXQtbWQtMCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdmF0YXItc20gbXItMyI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmF0YXItdGl0bGUgYmctbGlnaHQgcm91bmRlZC1jaXJjbGUgdGV4dC1wcmltYXJ5IGZvbnQtc2l6ZS0yNCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpLWV4Y2hhbmdlLWxpbmUiPjwvaT4KICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5IGFsaWduLXNlbGYtY2VudGVyIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICAgICAgICAgIDxoNT5FYXN5IFJldHVybjwvaDU+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LW11dGVkIG1iLTAiPk5lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIG10LTQgbXQtbWQtMCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdmF0YXItc20gbXItMyI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdmF0YXItdGl0bGUgYmctbGlnaHQgcm91bmRlZC1jaXJjbGUgdGV4dC1wcmltYXJ5IGZvbnQtc2l6ZS0yNCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InJpLW1vbmV5LWRvbGxhci1jaXJjbGUtbGluZSI+PC9pPgogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkgYWxpZ24tc2VsZi1jZW50ZXIgb3ZlcmZsb3ctaGlkZGVuIj4KICAgICAgICAgICAgICAgICAgPGg1PkNhc2ggb24gRGVsaXZlcnk8L2g1PgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1tdXRlZCBtYi0wIj5VdCBlbmltIGFkIG1pbmltYSBxdWlzPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBlbmQgcm93IC0tPgo8L0xheW91dD4K"},null]}